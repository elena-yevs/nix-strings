package com.nixsolutions.strings;

public interface StringUtils {

    /**
     * Функция проверяет, что ip соответствует формату NNN.NNN.NNN.NNN
     *
     * <p>Тоесть, что ip состоит из четырёх цифр разделённых точкой Каждое фракция
     *
     * <p>должна быть в промежутке от 0 до 255 В начале ip и конце возможно будут пробелы.
     *
     * <p>IP фракции от 0 до 127 преобразуются в байт от 0 до 127
     *
     * <p>IP фракции от 128 до 255 преобразуются в байт от -128 до -1
     * <p>
     * Пример: "127.0.0.255" -> {127, 0, 0, -1}
     * Params:
     * ip – Ip адрес
     * Returns:
     * ip в виде массива byte или, в случае ошибки, null.
     */
    byte[] ip2Bytes(String ip);

    /**
     * Функция конвертирует ip в NNN.NNN.NNN.NNN формат, где каждая группа разделённая точкой будет состоять из трёх чисел
     *
     * <p>Перед конвертацией необходимо удостовериться, что ip адрес, который передан в метод имеет правильный формат
     *
     * <p>Тоесть, что ip состоит из четырёх цифр разделённых точкой Каждое число должно быть в промежутке от 0 до 255
     *
     * <p>В начале ip и конце возможно будут пробелы. Пример конвертации: "127.0.0.1" -> "127.000.000.001"
     * <p>
     * Params:
     * ip – Ip адрес
     * Returns:
     * ip в виде строки формата NNN.NNN.NNN.NNN null в случае, если переданный ip адрес имеет неверный формат
     */
    String convertIp(String ip);

    /**
     * Функция Создает строку всех символов английского алфавита "A..Z", где четные буквы upper case, а нечетные в low case.
     * <p>
     * Returns:
     * StringBuilder с алфавитом.
     */
    StringBuilder alphabet();

    /**
     * Функция преобразует url в массив составляющих <схема>://[<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>
     *
     * <p>Во входной строке значение любая состовлящая может отсутствовать, в этом случае соответсвующее значение в выходном массиве должно быть null
     *
     * <p>Params: uri – строка содержащая идентификатор ресурса
     *
     * <p>Returns: массив строк, в которой: [0] - схема
     * [1] - логин [2] - пароль
     * [3] - хост [4] - port
     * [5] - путь [6] - параметры
     * [7] - якорь если нет какой-либо части, то в данном поле массива возвращаем null
     *
     * <p> Например, для url: "ftp://1.2.3.4:25/pass0/pass1/pass2?a=1&b=2#anchor" -> возвращаемое значение:
     * <p>
     * ["ftp", null, null, "1.2.3.4", "25", "pass0/pass1/pass2", "a=1&b=2", "anchor"]
     */
    String[] uri2Array(String uri);

    /**
     * Функция преобразует словосочетание в CamelCase независимо от оригинального регистра букв Исключением служит первая буква.
     *
     * <p>Её регистр нужно оставить нетронутым Разделителем слов служат пробелы и запятые
     *
     * <p>Вначале и вконце строки возможны дополнительные пробелы Пример: "HeLlO jAvA, WoRlD" -> "HelloJavaWorld"
     *
     * <p>Params: str – обычная строка
     *
     * <p>Returns: строка в CamelCase или пустая строка если передан null или пустая строка
     */
    String toCamelCase(String str);

    /**
     * Функция преобразует CamelCase строку в словосочетания в нижнем регистре Исключением служит первая буква.
     *
     * <p>Её регистр нужно оставить нетронутым Пример: "HelloJavaWorld" -> "Hello java world"
     *
     * <p>Params:camelStr – CamelCase строка
     *
     * <p>Returns:обычная строка или пустая строка если передан null или пустая строка
     */
    String fromCamelCase(String camelStr);


}
